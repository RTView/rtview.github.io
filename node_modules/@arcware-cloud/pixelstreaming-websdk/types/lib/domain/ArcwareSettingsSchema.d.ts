import { z } from "zod";
/** Arcware Settings. */
export declare const ArcwareSettingsSchema: z.ZodObject<{
    /** Overwrites the Session-Tool and uses the provided session instead. */
    session: z.ZodOptional<z.ZodString>;
    /** Can be used to be added to the request in order to verify access to private projects.
     * For internal use only. => Preview page.
     */
    token: z.ZodOptional<z.ZodString>;
    /** @deprecated in there for legacy use. Can only be used when token is provided. */
    bypass: z.ZodOptional<z.ZodBoolean>;
    /** Handler for server side error messages. */
    errorHandler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        type: z.ZodLiteral<"error">;
        code: z.ZodNumber;
        reason: z.ZodString;
        verbosity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "error";
        code: number;
        reason: string;
        verbosity: number;
    }, {
        type: "error";
        code: number;
        reason: string;
        verbosity: number;
    }>], z.ZodUnknown>, z.ZodVoid>>;
    /** Handler for queue events. */
    queueHandler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        type: z.ZodLiteral<"queue">;
        queue: z.ZodObject<{
            index: z.ZodOptional<z.ZodNumber>;
            queueLength: z.ZodOptional<z.ZodNumber>;
            waited: z.ZodOptional<z.ZodNumber>;
            estimatedWaitTime: z.ZodOptional<z.ZodNumber>;
            averageWaitTime: z.ZodOptional<z.ZodNumber>;
            valueType: z.ZodEnum<["milliseconds", "seconds", "minutes", "hours", "days"]>;
        }, "strip", z.ZodTypeAny, {
            valueType: "milliseconds" | "seconds" | "minutes" | "hours" | "days";
            index?: number | undefined;
            queueLength?: number | undefined;
            waited?: number | undefined;
            estimatedWaitTime?: number | undefined;
            averageWaitTime?: number | undefined;
        }, {
            valueType: "milliseconds" | "seconds" | "minutes" | "hours" | "days";
            index?: number | undefined;
            queueLength?: number | undefined;
            waited?: number | undefined;
            estimatedWaitTime?: number | undefined;
            averageWaitTime?: number | undefined;
        }>; /** Show or hide the connectionStrengthIcon button. */
    }, "strip", z.ZodTypeAny, {
        type: "queue";
        queue: {
            valueType: "milliseconds" | "seconds" | "minutes" | "hours" | "days";
            index?: number | undefined;
            queueLength?: number | undefined;
            waited?: number | undefined;
            estimatedWaitTime?: number | undefined;
            averageWaitTime?: number | undefined;
        };
    }, {
        type: "queue";
        queue: {
            valueType: "milliseconds" | "seconds" | "minutes" | "hours" | "days";
            index?: number | undefined;
            queueLength?: number | undefined;
            waited?: number | undefined;
            estimatedWaitTime?: number | undefined;
            averageWaitTime?: number | undefined;
        };
    }>], z.ZodUnknown>, z.ZodVoid>>;
    /** Handler for sessionId message. */
    sessionIdHandler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodVoid>>;
    /** Handler for love letters.
     * "LoveLetters" are send from backend to the SDK to state what phase the connection currently is in. */
    loveLetterHandler: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        type: z.ZodLiteral<"letter">;
        reason: z.ZodString;
        code: z.ZodNumber;
        verbosity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "letter";
        code: number;
        reason: string;
        verbosity: number;
    }, {
        type: "letter";
        code: number;
        reason: string;
        verbosity: number;
    }>], z.ZodUnknown>, z.ZodVoid>>;
    /** Show or hide the fullscreen button. */
    fullscreenButton: z.ZodOptional<z.ZodBoolean>;
    /** Show or hide the settings button. */
    settingsButton: z.ZodOptional<z.ZodBoolean>;
    /** Show or hide the info button. */
    infoButton: z.ZodOptional<z.ZodBoolean>;
    /** Show or hide the audio button. */
    audioButton: z.ZodOptional<z.ZodBoolean>;
    /** Show or hide the microphone button. */
    micButton: z.ZodOptional<z.ZodBoolean>;
    /** Show or hide the microphone button. */
    stopButton: z.ZodOptional<z.ZodBoolean>;
    /** Show or hide the connectionStrengthIcon button. */
    connectionStrengthIcon: z.ZodOptional<z.ZodBoolean>;
    /** ShareId, used for sharing your project.
     * Using ArcwareInit will set this required property for you. */
    shareId: z.ZodOptional<z.ZodString>;
    /** Id of your project, only required if your shareId refers to multiple projects.
     * Using ArcwareInit will set this required property for you. */
    projectId: z.ZodOptional<z.ZodString>;
    /** Enable/Disable LoveLetter logging to the console. */
    loveLetterLogging: z.ZodOptional<z.ZodBoolean>;
    /** Enable/Disable Connection Identifier logging to the console. */
    connectionIdentifierLoggingDisabled: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    session?: string | undefined;
    token?: string | undefined;
    bypass?: boolean | undefined;
    errorHandler?: ((args_0: {
        type: "error";
        code: number;
        reason: string;
        verbosity: number;
    }, ...args_1: unknown[]) => void) | undefined;
    queueHandler?: ((args_0: {
        type: "queue";
        queue: {
            valueType: "milliseconds" | "seconds" | "minutes" | "hours" | "days";
            index?: number | undefined;
            queueLength?: number | undefined;
            waited?: number | undefined;
            estimatedWaitTime?: number | undefined;
            averageWaitTime?: number | undefined;
        };
    }, ...args_1: unknown[]) => void) | undefined;
    sessionIdHandler?: ((args_0: string, ...args_1: unknown[]) => void) | undefined;
    loveLetterHandler?: ((args_0: {
        type: "letter";
        code: number;
        reason: string;
        verbosity: number;
    }, ...args_1: unknown[]) => void) | undefined;
    fullscreenButton?: boolean | undefined;
    settingsButton?: boolean | undefined;
    infoButton?: boolean | undefined;
    audioButton?: boolean | undefined;
    micButton?: boolean | undefined;
    stopButton?: boolean | undefined;
    connectionStrengthIcon?: boolean | undefined;
    shareId?: string | undefined;
    projectId?: string | undefined;
    loveLetterLogging?: boolean | undefined;
    connectionIdentifierLoggingDisabled?: boolean | undefined;
}, {
    session?: string | undefined;
    token?: string | undefined;
    bypass?: boolean | undefined;
    errorHandler?: ((args_0: {
        type: "error";
        code: number;
        reason: string;
        verbosity: number;
    }, ...args_1: unknown[]) => void) | undefined;
    queueHandler?: ((args_0: {
        type: "queue";
        queue: {
            valueType: "milliseconds" | "seconds" | "minutes" | "hours" | "days";
            index?: number | undefined;
            queueLength?: number | undefined;
            waited?: number | undefined;
            estimatedWaitTime?: number | undefined;
            averageWaitTime?: number | undefined;
        };
    }, ...args_1: unknown[]) => void) | undefined;
    sessionIdHandler?: ((args_0: string, ...args_1: unknown[]) => void) | undefined;
    loveLetterHandler?: ((args_0: {
        type: "letter";
        code: number;
        reason: string;
        verbosity: number;
    }, ...args_1: unknown[]) => void) | undefined;
    fullscreenButton?: boolean | undefined;
    settingsButton?: boolean | undefined;
    infoButton?: boolean | undefined;
    audioButton?: boolean | undefined;
    micButton?: boolean | undefined;
    stopButton?: boolean | undefined;
    connectionStrengthIcon?: boolean | undefined;
    shareId?: string | undefined;
    projectId?: string | undefined;
    loveLetterLogging?: boolean | undefined;
    connectionIdentifierLoggingDisabled?: boolean | undefined;
}>;
export type Settings = z.infer<typeof ArcwareSettingsSchema>;
