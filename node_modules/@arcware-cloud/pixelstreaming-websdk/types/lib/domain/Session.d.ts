import { z } from "zod";
declare const ZOptions: z.ZodObject<{
    localStorageKey: z.ZodDefault<z.ZodString>;
    keepSession: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    localStorageKey: string;
    keepSession: number;
}, {
    localStorageKey?: string | undefined;
    keepSession?: number | undefined;
}>;
type Options = z.infer<typeof ZOptions>;
/** The sessionId is stored in the localStorage to allow for reconnection and
 * to prevent spamming start requests of instances, when smashing F5.
 */
export declare class Session {
    private _current?;
    get current(): string | undefined;
    get noSession(): boolean;
    get id(): string | null;
    private options;
    private get localStorageKey();
    constructor(options?: Options);
    /** Set's the session with creation date for the given storage key to the localStorage. */
    set(sessionId: string): void;
    /** Removes a session from the localStorage. */
    unset(): void;
}
export {};
